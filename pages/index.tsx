import type { NextPage, InferGetStaticPropsType } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { Client } from '@notionhq/client'
import styles from '../styles/Home.module.css'

const NOTION_KEY = 'secret_gZNAR6WBAbPPHeFGemwS3rjgnMMvAZLG9GGLTFfaMhA'
const NOTION_ROOT_ID = '302e5568d84c4ef6a67812b2d31efcdd'

const Home: NextPage<InferGetStaticPropsType<typeof getStaticProps>> = ({
  page,
  blocks,
}) => {
  console.log('pageProps', page, blocks)
  //.paragraph.rich_text[0].plain_text

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className="text-5xl font-bold underline">
          {page.icon.emoji}{' '}
          {
            blocks.find((block) => block.type === 'heading_1').heading_1
              .rich_text[0].plain_text
          }
        </h1>

        {blocks
          .filter((block) => block.type === 'paragraph')
          .map((paragraph) => {
            return (
              <p key={paragraph.id}>
                {paragraph.paragraph.rich_text[0].plain_text}
              </p>
            )
          })}

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// revalidation is enabled and a new request comes in
export async function getStaticProps() {
  const notion = new Client({ auth: NOTION_KEY })
  const page = await notion.pages.retrieve({
    page_id: NOTION_ROOT_ID,
  })
  const allBlocks = await notion.blocks.children.list({
    block_id: NOTION_ROOT_ID,
    page_size: 50,
  })
  const blocks = allBlocks.results.filter(
    (block) => (block as any).type !== 'child_page'
  )

  return {
    props: { page, blocks },
    // Next.js will attempt to re-generate the page:
    // - When a request comes in
    // - At most once every 10 seconds
    revalidate: 10, // In seconds
  }
}

export default Home
